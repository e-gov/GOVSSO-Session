load_module modules/ngx_http_headers_more_filter_module.so;

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;
events {
    worker_connections  1024;
}

http {
  access_log /var/log/nginx/access.log;

  # Hide server version from Server header
  server_tokens off;

  # Remove response headers set by server.
  more_clear_headers Strict-Transport-Security;
  more_clear_headers X-Powered-By;
  more_clear_headers X-Varnish;
  more_clear_headers Via;
  more_clear_headers Server;

  proxy_redirect off;

  # Sets X-Forwarded-For header with client IP address, overwrites if set by client.
  proxy_set_header X-Forwarded-For $remote_addr;

  server {
    listen 13080;
    server_name gateway;

    location = /.well-known/openid-configuration {
      proxy_pass http://hydra:4444;
    }
    location = /.well-known/jwks.json {
      proxy_pass http://hydra:4444;
    }

    location = /oauth2/auth {
      # Relax Hydra cookies settings for them to be sendable over cross-site.
      # Needed so the cookies would be sent from client application to Hydra incase of session extension
      proxy_cookie_flags oauth2_authentication_csrf_insecure     Secure SameSite=None;
      proxy_cookie_flags oauth2_authentication_session_insecure  Secure SameSite=None;
      proxy_cookie_flags oauth2_consent_csrf_insecure            Secure SameSite=None;

      # TODO: Possibly check against registered clients in the future.
      # if ($http_origin ~ '^https?://(localhost|www\.yourdomain\.com|www\.yourotherdomain\.com)') {
      #   set $cors 'true';
      # }

      # Set CORS headers for session extension process.
      if ($arg_prompt = 'none') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
      }

      # Add 'prompt=consent' query parameter, if missing.
      if ($arg_prompt = '') {
        # Break, so rewritten request is not passed to another location.
        rewrite ^ /oauth2/auth?prompt=consent break;
      }
      # Adds 'traceparent' header ONLY if URL contains query parameter 'traceparent' with value.
      add_header traceparent $arg_traceparent;

      proxy_pass http://hydra:4444;
    }

    location = /oauth2/sessions/logout {
      # Adds 'traceparent' header ONLY if URL contains query parameter 'traceparent' with value.
      add_header traceparent $arg_traceparent;
      proxy_pass http://hydra:4444;
    }

    location = /oauth2/token {
      proxy_pass http://hydra:4444;
    }

    # Hides actuator endpoints from public use.
    # The tilde and asterisks ensure that this location will be matched case insensitively.
    location ~* ^/actuator {
      return http://session:8080/notfound;
    }

    # Exact match with no extra path - '{port}://{hostname}/'
    # Needed because redirect to www.ria.ee should trigger only when location has no addition path and parameters.
    location = / {
      if ($request_method = GET) {
        return 302 https://www.ria.ee/et/riigi-infosusteem/eid/partnerile.html;
      }
      proxy_pass http://session:8080;
    }

    # Needed for SSO session extension from cross-origin client application
    # TODO: GSSO-245 set by session application
    location = /login/init {
      add_header 'Access-Control-Allow-Origin' "$http_origin" always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      proxy_pass http://session:8080;
    }

    # Needed for SSO session extension from cross-origin client application
    # TODO: GSSO-245 set by session application
    location = /consent/init {
      add_header 'Access-Control-Allow-Origin' "$http_origin" always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      proxy_pass http://session:8080;
    }

    # All other locations
    location / {
      proxy_pass http://session:8080;
    }
  }
}
